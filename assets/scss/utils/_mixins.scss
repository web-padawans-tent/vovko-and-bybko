@use 'sass:math';

@use './variables' as *;
@use './functions' as *;

@mixin adaptiveValue(
	$property,
	$startSize,
	$minSize,
	$widthFrom: $containerWidth,
	$widthTo: $minWidth
) {
	$addSize: math.div($startSize - $minSize, 16);

	@if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
		$widthFrom: $maxWidth;
	}

	$widthFromMedia: em($widthFrom);
	$widthToMedia: em($widthTo);

	$slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
	$yIntersection: -$widthTo * $slope + $minSize;
	@if ($yIntersection==0) {
		$yIntersection: 0.000001;
	}
	$flyValue: #{pxToRem($yIntersection)}' + ' #{$slope * 100}vw;

	$propertyValue: #{'clamp(' pxToRem($minSize) ',' $flyValue ',' pxToRem($startSize) ')'};

	@if ($minSize > $startSize) {
		$propertyValue: #{'clamp('
			pxToRem($startSize)
			','
			$flyValue
			','
			pxToRem($minSize)
			')'};
	}

	@media (min-width: $widthFromMedia) {
		#{$property}: pxToRem($startSize);
	}

	@media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
		@supports (#{$property}: $propertyValue) {
			#{$property}: $propertyValue;
		}

		@supports not (#{$property}: $propertyValue) {
			#{$property}: calc(
				#{pxToRem($minSize)} + #{$addSize} * (100vw - #{pxToRem($widthTo)}) / #{math.div(
						$widthFrom,
						16
					) - math.div($widthTo, 16)}
			);
		}
	}


	@media (max-width: $widthToMedia) {
		#{$property}: pxToRem($minSize);
	}
}
